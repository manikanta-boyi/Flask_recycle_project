"""Increased password hash length again

Revision ID: 72c064b9304a
Revises: a4c1718b11bc
Create Date: 2025-06-28 21:10:29.416683

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '72c064b9304a'
down_revision = 'a4c1718b11bc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # This line creates the schema if it doesn't already exist.
    # It's good to keep this at the very beginning of your *first* schema-aware migration.
    op.execute('CREATE SCHEMA IF NOT EXISTS recycle_project_schema')

    # Now, ALTER the existing tables to modify column types/lengths.
    # IMPORTANT: ONLY include alter_column operations for columns whose types you CHANGED.
    # Do NOT include create_table for tables that already exist.

    with op.batch_alter_table('otp', schema='recycle_project_schema') as batch_op:
        # Assuming you changed temp_password_hash from 128 to 512
        batch_op.alter_column('temp_password_hash', 
                              existing_type=sa.VARCHAR(128), # Or whatever its previous type was
                              type_=sa.String(512), 
                              existing_nullable=False,
                              postgresql_using='temp_password_hash::varchar(512)') # For Postgres type casting

        # If you changed email from 120 to 255
        batch_op.alter_column('email',
                              existing_type=sa.VARCHAR(120),
                              type_=sa.String(255),
                              existing_nullable=False,
                              postgresql_using='email::varchar(255)') # For Postgres type casting

    with op.batch_alter_table('users', schema='recycle_project_schema') as batch_op:
        # Assuming you changed password_hash from 128 to 512
        batch_op.alter_column('password_hash', 
                              existing_type=sa.VARCHAR(128), # Or whatever its previous type was
                              type_=sa.String(512), 
                              existing_nullable=True,
                              postgresql_using='password_hash::varchar(512)') # For Postgres type casting

    # There should be NO op.create_table for otp, users, or posts here.
    # There should be NO op.drop_table for otp, users, or posts here.
    # There should be NO batch_op.drop_index for schema=None here.

    # ### end Alembic commands ###


def downgrade():
    # Only include downgrade operations here if you want to revert changes
    # For now, it's safer to keep this simple or empty if you only care about upgrading.
    # If you need to revert, these should be the inverse of the upgrade.
    # For example:
    # with op.batch_alter_table('otp', schema='recycle_project_schema') as batch_op:
    #     batch_op.alter_column('temp_password_hash',
    #                           existing_type=sa.String(512),
    #                           type_=sa.VARCHAR(128),
    #                           existing_nullable=False,
    #                           postgresql_using='temp_password_hash::varchar(128)')
    # ... and so on for other columns
    pass # Keep pass if you don't need downgrade functionality
